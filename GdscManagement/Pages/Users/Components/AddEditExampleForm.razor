@using GdscManagement.Common.Features.Users.Models
@using GdscManagement.Features.Users
@using GdscManagement.Utilities
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using System.Reflection
@using System.ComponentModel.DataAnnotations
@using GdscManagement.Utilities.Attributes
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inherits BaseComponent<UserManager<User>, User, UserViewModel>
@inject ViewModelHelper<UserViewModel> Helper

<EditForm Model="@_viewModel" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator/>
    <MudGrid>
        <MudItem xs="12">
            <MudCard>
                <MudCardContent>
                    @foreach (var property in _viewModel.GetType().GetProperties())
                    {
                        if (property.GetExtrasInfo().ReadOnly && !IsEdit)
                        {
                            continue;
                        }

                        <FieldBuilder Property="property" ViewModel="_viewModel"/>
                    }
                </MudCardContent>

                <MudCardActions>
                    <MudButton
                        Variant="Variant.Outlined"
                        Color="Color.Primary"
                        StartIcon="fa-solid fa-circle-left"
                        IconColor="Color.Primary"
                        Class="ml-auto"
                        OnClick="GoBack">
                        Back
                    </MudButton>

                    <MudSpacer></MudSpacer>

                    <MudButton
                        ButtonType="ButtonType.Submit"
                        Variant="Variant.Filled"
                        StartIcon="fa-solid fa-circle-check"
                        IconColor="Color.Surface"
                        Color="Color.Success"
                        Class="ml-auto">
                        @(IsEdit ? "Update" : "Add")
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>


@code {

    [Parameter]
    public User? Model { get; set; }

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    UserViewModel _viewModel = new();
    bool IsEdit => Model is not null;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _viewModel = Model is null ? _viewModel : Map(Model);
    }

    async Task AddExample()
    {
        if (Model is not null)
        {
            Snackbar.Add("Something went wrong, there's and existing Model", Severity.Error);
            return;
        }

    // var entity = new ExampleModel(_viewModel.Title) { Number = _viewModel.Number, Type = _viewModel.Type };
    // await Service.Add(entity);
        StateHasChanged();
        Snackbar.Add("Example added!", Severity.Success);
        GoBack();
    }

    async Task EditExample()
    {
        if (Model is null)
        {
            Snackbar.Add("Something went wrong, Model is null", Severity.Error);
            return;
        }

    // Model.Number = _viewModel.Number;
    // Model.Type = _viewModel.Type;
    // Model.Title = _viewModel.Title;
    // await Service.Update(Model);
        StateHasChanged();
        Snackbar.Add("Example updated!", Severity.Success);
        GoBack();
    }

    void GoBack()
    {
        Navigation.NavigateTo("/users");
    }

    async Task OnSubmit()
    {
        if (IsEdit)
        {
            await EditExample();
        }
        else
        {
            await AddExample();
        }

        await OnValidSubmit.InvokeAsync();
        _viewModel = new UserViewModel();
    }

}
